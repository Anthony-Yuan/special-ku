  #include<stdio.h>
   #include<stack>
   
   struct BinaryTreeNode
   {
       int              m_nValue;
       BinaryTreeNode*  m_pLeft;
       BinaryTreeNode*  m_pRight;
   };
  
  BinaryTreeNode* CreateBinaryTreeNode(int value)
  {
      BinaryTreeNode* pNode = new BinaryTreeNode();
      pNode->m_nValue = value;
      pNode->m_pLeft = NULL;
     pNode->m_pRight = NULL;
	  return pNode;
  }
 
  void ConnectTreeNodes(BinaryTreeNode* pParent, BinaryTreeNode* pLeft, 
                      BinaryTreeNode* pRight)
  {
      if(pParent != NULL)
      {
          pParent->m_pLeft = pLeft;
          pParent->m_pRight = pRight;
      }
  }
  
  void PrintTreeNode(BinaryTreeNode* pNode)
  {
      if(pNode != NULL)
     {
          printf("value of this node is: %d\n", pNode->m_nValue);
  
       if(pNode->m_pLeft != NULL)
              printf("value of its left child is: %d\n", pNode->m_pLeft->m_nValue);
          else
              printf("left child is null ");
 
          if(pNode->m_pRight != NULL)
             printf("value of its right child is: %d\n", pNode->m_pRight->m_nValue);
          else
              printf("right child is null");
      }
      else
      {
          printf("this node is null");
     }
      
  }
  
  void PrintTree(BinaryTreeNode* pRoot)
  {
     PrintTreeNode(pRoot);
 
      if(pRoot != NULL)
      {
          if(pRoot->m_pLeft != NULL)
              PrintTree(pRoot->m_pLeft);
          if(pRoot->m_pRight != NULL)
              PrintTree(pRoot->m_pRight);
     }
  }
  
  void DestroyTree(BinaryTreeNode* pRoot)
  {
      if(pRoot != NULL)
      {
          BinaryTreeNode* pLeft = pRoot->m_pLeft;
          BinaryTreeNode* pRight = pRoot->m_pRight;
          
          delete pRoot;
          pRoot = NULL;
         
          DestroyTree(pLeft);
          DestroyTree(pRight);
      }
  }
  
  
  void MirrorIteratively(BinaryTreeNode* pRoot)
 {
     if(pRoot == NULL)
         return;
 
     std::stack<BinaryTreeNode*> stackTreeNode;
     stackTreeNode.push(pRoot);
 
     while(stackTreeNode.size() > 0)
     {
         BinaryTreeNode *pNode = stackTreeNode.top();
         stackTreeNode.pop();
 
         BinaryTreeNode *pTemp = pNode->m_pLeft;
         pNode->m_pLeft = pNode->m_pRight;
        pNode->m_pRight = pTemp;
 
         if(pNode->m_pLeft)
                stackTreeNode.push(pNode->m_pLeft);
        if(pNode->m_pRight)
                 stackTreeNode.push(pNode->m_pRight);
     }
 }
 
 // 测试完全二叉树
 //            1
 //          /   
 //        2      3
 //       /      / 
 //      4   5   6  7
 
 void main()
 {   
     BinaryTreeNode* pNode1 = CreateBinaryTreeNode(1);
     BinaryTreeNode* pNode2 = CreateBinaryTreeNode(2);
     BinaryTreeNode* pNode3 = CreateBinaryTreeNode(3);
     BinaryTreeNode* pNode4 = CreateBinaryTreeNode(4);
     BinaryTreeNode* pNode5 = CreateBinaryTreeNode(5);
     BinaryTreeNode* pNode6 = CreateBinaryTreeNode(6);
     BinaryTreeNode* pNode7 = CreateBinaryTreeNode(7);
 
     ConnectTreeNodes(pNode1, pNode2, pNode3);
     ConnectTreeNodes(pNode2, pNode4, pNode5);
    ConnectTreeNodes(pNode3, pNode6, pNode7);
 
     PrintTree(pNode1);
 
  
     printf("===== MirrorIteratively=====n");
     MirrorIteratively(pNode1);
     PrintTree(pNode1);
 
     DestroyTree(pNode1);
 }
